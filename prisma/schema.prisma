generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  role        Role       @default(USER)
  username    String     @unique @db.VarChar(16)
  twitterId   String?    @unique
  githubId    String?    @unique
  googleId    String?    @unique
  twitchId    String?    @unique
  discordId   String?    @unique
  supabaseId  String?    @unique
  email       String?    @unique
  avatar      String?
  description String?    @db.VarChar(256)
  location    String?    @db.VarChar(32)
  comments    Comment[]
  questions   Question[]
  posts       Post[]
  guestbook   GuestBook? @relation(fields: [guestbookId], references: [id], onDelete: Cascade)
  guestbookId Int?
}

enum Role {
  USER
  ADMIN
  BLOCKED
}

model Comment {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  content    String    @db.Text
  author     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  questionId Int?
  postId     Int?

  @@index([questionId])
  @@index([postId])
}

model Question {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  author      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String    @db.VarChar(256)
  description String?   @db.VarChar(1024)
  userId      Int
  comments    Comment[]
}

model Talent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

model Announcement {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
}

model GuestBook {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  content   String
  createdAt DateTime @default(now())
  User      User[]
}

model Post {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  likes     Int       @default(0)
  views     Int       @default(0)
  author    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Form {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  content   String
  createdAt DateTime @default(now())
}

model Maintenance {
  id        Int      @id @default(autoincrement())
  reason    String
  beginAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
}
